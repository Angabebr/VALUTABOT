from telegram import Update
from telegram.ext import (
    CommandHandler, CallbackQueryHandler, MessageHandler, 
    ContextTypes, filters, ConversationHandler
)
from converter import CurrencyConverter
from keyboards import KeyboardBuilder
from config import MESSAGES, CURRENCY_EMOJIS
import re
from datetime import datetime
from typing import Dict, Optional
import logging

# –°–æ—Å—Ç–æ—è–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
WAITING_AMOUNT, WAITING_SEARCH = range(2)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
converter = CurrencyConverter()

# –•—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data: Dict[str, Dict] = {}

def get_user_data(user_id: str) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if user_id not in user_data:
        user_data[user_id] = {
            'conversion_state': {},
            'favorites': [],
            'settings': {
                'default_fiat': 'USD',
                'default_crypto': 'BTC',
                'notifications': True
            }
        }
    return user_data[user_id]

def register_handlers(app):
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤"""
    # –ö–æ–º–∞–Ω–¥—ã
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("rates", rates_command))
    app.add_handler(CommandHandler("convert", convert_command))
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CallbackQueryHandler(handle_callback))
    
    # Conversation handler –¥–ª—è –≤–≤–æ–¥–∞ —Å—É–º–º—ã
    conv_handler = ConversationHandler(
        entry_points=[],
        states={
            WAITING_AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_amount_input)],
            WAITING_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_search_input)]
        },
        fallbacks=[CommandHandler("cancel", cancel_conversation)]
    )
    app.add_handler(conv_handler)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text_message))

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /start"""
    user_id = str(update.effective_user.id)
    get_user_data(user_id)  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    
    await update.message.reply_text(
        MESSAGES['welcome'],
        reply_markup=KeyboardBuilder.main_menu()
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /help"""
    help_text = """
üÜò **–°–ø—Ä–∞–≤–∫–∞ –ø–æ –±–æ—Ç—É**

**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**
/start - –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
/convert - –ë—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
/rates - –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
/help - –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
1. üí± –ù–∞–∂–º–∏—Ç–µ "–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å"
2. üè∑Ô∏è –í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—ã
3. üí∞ –í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É
4. ‚úÖ –ü–æ–ª—É—á–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç

**–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:**
‚Ä¢ 12+ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç (USD, EUR, RUB –∏ –¥—Ä.)
‚Ä¢ 12+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç (BTC, ETH, BNB –∏ –¥—Ä.)

**–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ:**
‚Ä¢ üìä –ê–∫—Ç—É–∞–ª—å–Ω—ã–µ –∫—É—Ä—Å—ã
‚Ä¢ üìà –¢—Ä–µ–Ω–¥–æ–≤—ã–µ –≤–∞–ª—é—Ç—ã
‚Ä¢ üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏
"""
    await update.message.reply_text(
        help_text,
        reply_markup=KeyboardBuilder.back_button(),
        parse_mode='Markdown'
    )

async def convert_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /convert"""
    await update.message.reply_text(
        MESSAGES['select_from_currency'],
        reply_markup=KeyboardBuilder.currency_type_selection()
    )

async def rates_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ö–æ–º–∞–Ω–¥–∞ /rates"""
    await update.message.reply_text(
        "üìä **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–ª—é—Ç:",
        reply_markup=KeyboardBuilder.rates_menu(),
        parse_mode='Markdown'
    )

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = update.callback_query
    await query.answer()
    
    data = query.data
    user_id = str(update.effective_user.id)
    user_info = get_user_data(user_id)
    
    try:
        # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        if data == 'back_main':
            await query.edit_message_text(
                MESSAGES['welcome'],
                reply_markup=KeyboardBuilder.main_menu()
            )
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è
        elif data == 'convert':
            await query.edit_message_text(
                MESSAGES['select_from_currency'],
                reply_markup=KeyboardBuilder.currency_type_selection()
            )
        
        elif data.startswith('type_'):
            await handle_currency_type_selection(query, data, user_info)
        
        elif data.startswith('currency_'):
            await handle_currency_selection(query, data, user_info)
        
        elif data.startswith('quick_amount_'):
            await handle_quick_amount(query, data, user_info)
        
        elif data.startswith('swap_'):
            await handle_currency_swap(query, data, user_info)
        
        # –ö—É—Ä—Å—ã –≤–∞–ª—é—Ç
        elif data == 'rates':
            await query.edit_message_text(
                "üìä **–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç**\n\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–ª—é—Ç:",
                reply_markup=KeyboardBuilder.rates_menu(),
                parse_mode='Markdown'
            )
        
        elif data.startswith('rates_'):
            await handle_rates_request(query, data)
        
        # –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        elif data == 'trending':
            await query.edit_message_text(
                MESSAGES['trending_title'],
                reply_markup=KeyboardBuilder.trending_menu()
            )
        
        elif data.startswith('trending_'):
            await handle_trending_request(query, data)
        
        # –û –±–æ—Ç–µ
        elif data == 'about':
            await query.edit_message_text(
                MESSAGES['about_text'],
                reply_markup=KeyboardBuilder.back_button(),
                parse_mode='Markdown'
            )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        elif data == 'settings':
            await query.edit_message_text(
                "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é:",
                reply_markup=KeyboardBuilder.settings_menu(),
                parse_mode='Markdown'
            )
        
        elif data.startswith('settings_'):
            await handle_settings_request(query, data, user_info)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤
        elif data.endswith('_refresh'):
            await handle_refresh_rates(query)
        
        else:
            await query.edit_message_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞")
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –≤ handle_callback: {e}")
        await query.edit_message_text("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_currency_type_selection(query, data: str, user_info: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –≤–∞–ª—é—Ç—ã"""
    parts = data.split('_')
    currency_type = parts[1]  # fiat –∏–ª–∏ crypto
    action = parts[2] if len(parts) > 2 else 'from'
    
    if currency_type == 'fiat':
        keyboard = KeyboardBuilder.fiat_currencies(action)
        text = "üí∞ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É:"
    else:
        keyboard = KeyboardBuilder.crypto_currencies(action)
        text = "‚Çø –í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:"
    
    await query.edit_message_text(text, reply_markup=keyboard)

async def handle_currency_selection(query, data: str, user_info: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –≤–∞–ª—é—Ç—ã"""
    parts = data.split('_')
    action = parts[1]  # from –∏–ª–∏ to
    currency = parts[2]
    
    conversion_state = user_info['conversion_state']
    
    if action == 'from':
        conversion_state['from_currency'] = currency
        await query.edit_message_text(
            MESSAGES['select_to_currency'],
            reply_markup=KeyboardBuilder.currency_type_selection()
        )
        # –ò–∑–º–µ–Ω—è–µ–º action –Ω–∞ 'to' –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—ã–±–æ—Ä–∞
        user_info['conversion_state']['next_action'] = 'to'
    
    elif action == 'to':
        conversion_state['to_currency'] = currency
        from_curr = conversion_state.get('from_currency')
        
        if from_curr:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–ø—Ü–∏–∏ –≤–≤–æ–¥–∞ —Å—É–º–º—ã
            await query.edit_message_text(
                f"üí± {from_curr} ‚Üí {currency}\n\n{MESSAGES['enter_amount']}",
                reply_markup=KeyboardBuilder.amount_quick_select(from_curr, currency)
            )
        else:
            await query.edit_message_text("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–±—Ä–∞–Ω–∞ –∏—Å—Ö–æ–¥–Ω–∞—è –≤–∞–ª—é—Ç–∞")

async def handle_quick_amount(query, data: str, user_info: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä–æ–≥–æ –≤—ã–±–æ—Ä–∞ —Å—É–º–º—ã"""
    parts = data.split('_')
    amount = float(parts[2])
    from_currency = parts[3]
    to_currency = parts[4]
    
    await perform_conversion(query, amount, from_currency, to_currency)

async def perform_conversion(query, amount: float, from_currency: str, to_currency: str):
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    try:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É
        await query.edit_message_text(MESSAGES['loading'])
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        result = await converter.convert(amount, from_currency, to_currency)
        
        if result:
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            timestamp = datetime.fromisoformat(result['timestamp']).strftime('%H:%M %d.%m.%Y')
            
            message = MESSAGES['conversion_result'].format(
                amount=result['amount'],
                from_curr=result['from_currency'],
                result=result['result'],
                to_curr=result['to_currency'],
                rate=result['rate'],
                timestamp=timestamp
            )
            
            await query.edit_message_text(
                message,
                reply_markup=KeyboardBuilder.conversion_actions(from_currency, to_currency)
            )
        else:
            await query.edit_message_text(
                MESSAGES['error_conversion_failed'],
                reply_markup=KeyboardBuilder.back_button()
            )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        await query.edit_message_text(
            MESSAGES['error_conversion_failed'],
            reply_markup=KeyboardBuilder.back_button()
        )

async def handle_currency_swap(query, data: str, user_info: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–º–µ–Ω—ã –≤–∞–ª—é—Ç –º–µ—Å—Ç–∞–º–∏"""
    parts = data.split('_', 2)
    currencies = parts[1:]
    from_currency, to_currency = currencies[0], currencies[1]
    
    # –ú–µ–Ω—è–µ–º –≤–∞–ª—é—Ç—ã –º–µ—Å—Ç–∞–º–∏ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤—ã–±–æ—Ä —Å—É–º–º—ã
    await query.edit_message_text(
        f"üí± {to_currency} ‚Üí {from_currency}\n\n{MESSAGES['enter_amount']}",
        reply_markup=KeyboardBuilder.amount_quick_select(to_currency, from_currency)
    )

async def handle_rates_request(query, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    currency_type = data.split('_')[1]
    
    if currency_type == 'refresh':
        await handle_refresh_rates(query)
        return
    
    try:
        await query.edit_message_text(MESSAGES['loading'])
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã
        await converter.update_rates()
        
        if currency_type == 'fiat':
            rates_text = await format_fiat_rates()
        elif currency_type == 'crypto':
            rates_text = await format_crypto_rates()
        else:
            rates_text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø –≤–∞–ª—é—Ç"
        
        await query.edit_message_text(
            rates_text,
            reply_markup=KeyboardBuilder.rates_menu(),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤",
            reply_markup=KeyboardBuilder.rates_menu()
        )

async def format_fiat_rates() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    text = "üí∞ **–ö—É—Ä—Å—ã —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç** (–∫ USD)\n\n"
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≤–∞–ª—é—Ç—ã
    major_currencies = ['EUR', 'GBP', 'RUB', 'JPY', 'CNY']
    
    for currency in major_currencies:
        if currency in converter.fiat_cache:
            rate = converter.fiat_cache[currency]
            emoji = CURRENCY_EMOJIS.get(currency, 'üí∞')
            text += f"{emoji} **{currency}**: {rate:.4f}\n"
    
    text += f"\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    return text

async def format_crypto_rates() -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
    text = "‚Çø **–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç** (–≤ USD)\n\n"
    
    # –¢–û–ü –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
    top_cryptos = ['bitcoin', 'ethereum', 'binancecoin', 'cardano', 'solana']
    
    for crypto_id in top_cryptos:
        if crypto_id in converter.crypto_cache:
            data = converter.crypto_cache[crypto_id]
            price = data.get('usd', 0)
            change = data.get('usd_24h_change', 0)
            
            symbol = converter.supported_crypto[crypto_id]['symbol']
            emoji = converter.supported_crypto[crypto_id]['icon']
            
            change_emoji = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
            change_text = f"{change:+.2f}%"
            
            text += f"{emoji} **{symbol}**: ${price:,.2f} {change_emoji} {change_text}\n"
    
    text += f"\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    return text

async def handle_trending_request(query, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    trending_type = data.split('_')[1]
    
    if trending_type == 'refresh':
        await handle_refresh_rates(query)
        return
    
    try:
        await query.edit_message_text(MESSAGES['loading'])
        
        trending_info = await converter.get_trending_info()
        
        if trending_type == 'gainers':
            text = format_trending_list(trending_info['top_gainers'], "üìà **–†–∞—Å—Ç—É—â–∏–µ –≤–∞–ª—é—Ç—ã**")
        elif trending_type == 'losers':
            text = format_trending_list(trending_info['top_losers'], "üìâ **–ü–∞–¥–∞—é—â–∏–µ –≤–∞–ª—é—Ç—ã**")
        elif trending_type == 'popular':
            text = format_popular_currencies(trending_info['popular'])
        else:
            text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ç—Ä–µ–Ω–¥–æ–≤"
        
        await query.edit_message_text(
            text,
            reply_markup=KeyboardBuilder.trending_menu(),
            parse_mode='Markdown'
        )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö",
            reply_markup=KeyboardBuilder.trending_menu()
        )

def format_trending_list(currencies: list, title: str) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∞–ª—é—Ç"""
    text = f"{title}\n\n"
    
    for i, currency in enumerate(currencies[:5], 1):
        emoji = CURRENCY_EMOJIS.get(currency['symbol'], 'üìä')
        change_emoji = "üìà" if currency['change'] > 0 else "üìâ"
        
        text += f"{i}. {emoji} **{currency['symbol']}** "
        text += f"${currency['price']:,.2f} "
        text += f"{change_emoji} {currency['change']:+.2f}%\n"
    
    text += f"\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    return text

def format_popular_currencies(popular_ids: list) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç"""
    text = "üî• **–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –≤–∞–ª—é—Ç—ã**\n\n"
    
    for crypto_id in popular_ids:
        if crypto_id in converter.crypto_cache:
            data = converter.crypto_cache[crypto_id]
            price = data.get('usd', 0)
            change = data.get('usd_24h_change', 0)
            
            symbol = converter.supported_crypto[crypto_id]['symbol']
            emoji = converter.supported_crypto[crypto_id]['icon']
            change_emoji = "üìà" if change > 0 else "üìâ" if change < 0 else "‚û°Ô∏è"
            
            text += f"{emoji} **{symbol}**: ${price:,.2f} {change_emoji} {change:+.2f}%\n"
    
    text += f"\nüïí –û–±–Ω–æ–≤–ª–µ–Ω–æ: {datetime.now().strftime('%H:%M %d.%m.%Y')}"
    return text

async def handle_settings_request(query, data: str, user_info: Dict):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    setting_type = data.split('_')[1]
    
    await query.edit_message_text(
        "‚öôÔ∏è –≠—Ç–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞",
        reply_markup=KeyboardBuilder.settings_menu()
    )

async def handle_refresh_rates(query):
    """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
    try:
        await query.edit_message_text(MESSAGES['loading'])
        
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã
        converter.cache_timestamp = None
        success = await converter.update_rates()
        
        if success:
            await query.edit_message_text(
                MESSAGES['rates_updated'],
                reply_markup=KeyboardBuilder.back_button('rates')
            )
        else:
            await query.edit_message_text(
                "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤",
                reply_markup=KeyboardBuilder.back_button('rates')
            )
    
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
        await query.edit_message_text(
            "‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤",
            reply_markup=KeyboardBuilder.back_button('rates')
        )

async def handle_amount_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ —Å—É–º–º—ã"""
    try:
        amount = float(update.message.text.replace(',', '.'))
        
        if amount <= 0:
            await update.message.reply_text(MESSAGES['error_invalid_amount'])
            return WAITING_AMOUNT
        
        return ConversationHandler.END
    
    except ValueError:
        await update.message.reply_text(MESSAGES['error_invalid_amount'])
        return WAITING_AMOUNT

async def handle_search_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∏—Å–∫–∞ –≤–∞–ª—é—Ç"""
    await update.message.reply_text("üîç –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
    return ConversationHandler.END

async def cancel_conversation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=KeyboardBuilder.main_menu()
    )
    return ConversationHandler.END

async def handle_text_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text.lower()
    
    # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –∫–æ–º–∞–Ω–¥—ã –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: "100 usd to eur")
    conversion_pattern = r'(\d+(?:\.\d+)?)\s*([a-z]{3})\s*(?:to|–≤|->|‚Üí)\s*([a-z]{3})'
    match = re.search(conversion_pattern, text)
    
    if match:
        amount, from_curr, to_curr = match.groups()
        amount = float(amount)
        
        try:
            result = await converter.convert(amount, from_curr.upper(), to_curr.upper())
            
            if result:
                timestamp = datetime.fromisoformat(result['timestamp']).strftime('%H:%M %d.%m.%Y')
                
                message = MESSAGES['conversion_result'].format(
                    amount=result['amount'],
                    from_curr=result['from_currency'],
                    result=result['result'],
                    to_curr=result['to_currency'],
                    rate=result['rate'],
                    timestamp=timestamp
                )
                
                await update.message.reply_text(
                    message,
                    reply_markup=KeyboardBuilder.conversion_actions(from_curr.upper(), to_curr.upper())
                )
            else:
                await update.message.reply_text(MESSAGES['error_conversion_failed'])
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–π –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            await update.message.reply_text(MESSAGES['error_conversion_failed'])
    else:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        await update.message.reply_text(
            MESSAGES['welcome'],
            reply_markup=KeyboardBuilder.main_menu()
        )
