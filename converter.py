import requests
import asyncio
from datetime import datetime, timedelta
from typing import Dict, Optional, Union
import json

class CurrencyConverter:
    def __init__(self):
        # API –¥–ª—è —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç
        self.fiat_api_url = "https://api.exchangerate-api.com/v4/latest/USD"
        self.crypto_api_url = "https://api.coingecko.com/api/v3/simple/price"
        
        # –ö—ç—à –¥–ª—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
        self.fiat_cache = {}
        self.crypto_cache = {}
        self.cache_timestamp = None
        self.cache_duration = timedelta(minutes=15)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã
        self.supported_fiat = {
            'USD': {'name': '–î–æ–ª–ª–∞—Ä –°–®–ê', 'symbol': '$', 'flag': 'üá∫üá∏'},
            'EUR': {'name': '–ï–≤—Ä–æ', 'symbol': '‚Ç¨', 'flag': 'üá™üá∫'},
            'RUB': {'name': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å', 'symbol': '‚ÇΩ', 'flag': 'üá∑üá∫'},
            'GBP': {'name': '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç', 'symbol': '¬£', 'flag': 'üá¨üáß'},
            'JPY': {'name': '–Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞', 'symbol': '¬•', 'flag': 'üáØüáµ'},
            'CNY': {'name': '–ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å', 'symbol': '¬•', 'flag': 'üá®üá≥'},
            'CAD': {'name': '–ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', 'symbol': 'C$', 'flag': 'üá®üá¶'},
            'AUD': {'name': '–ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä', 'symbol': 'A$', 'flag': 'üá¶üá∫'},
            'CHF': {'name': '–®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫', 'symbol': 'CHF', 'flag': 'üá®üá≠'},
            'KZT': {'name': '–ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ', 'symbol': '‚Ç∏', 'flag': 'üá∞üáø'},
            'UAH': {'name': '–£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞', 'symbol': '‚Ç¥', 'flag': 'üá∫üá¶'},
            'BYN': {'name': '–ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å', 'symbol': 'Br', 'flag': 'üáßüáæ'}
        }
        
        self.supported_crypto = {
            'bitcoin': {'name': 'Bitcoin', 'symbol': 'BTC', 'icon': '‚Çø'},
            'ethereum': {'name': 'Ethereum', 'symbol': 'ETH', 'icon': 'Œû'},
            'binancecoin': {'name': 'Binance Coin', 'symbol': 'BNB', 'icon': 'ü™ô'},
            'cardano': {'name': 'Cardano', 'symbol': 'ADA', 'icon': 'üî∫'},
            'solana': {'name': 'Solana', 'symbol': 'SOL', 'icon': '‚óé'},
            'ripple': {'name': 'XRP', 'symbol': 'XRP', 'icon': 'üíß'},
            'polkadot': {'name': 'Polkadot', 'symbol': 'DOT', 'icon': '‚óè'},
            'dogecoin': {'name': 'Dogecoin', 'symbol': 'DOGE', 'icon': 'üêï'},
            'polygon': {'name': 'Polygon', 'symbol': 'MATIC', 'icon': 'üî∑'},
            'litecoin': {'name': 'Litecoin', 'symbol': 'LTC', 'icon': '≈Å'},
            'chainlink': {'name': 'Chainlink', 'symbol': 'LINK', 'icon': 'üîó'},
            'avalanche-2': {'name': 'Avalanche', 'symbol': 'AVAX', 'icon': 'üèîÔ∏è'}
        }

    async def _fetch_fiat_rates(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        try:
            response = requests.get(self.fiat_api_url, timeout=10)
            response.raise_for_status()
            data = response.json()
            return data.get('rates', {})
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ —Ñ–∏–∞—Ç: {e}")
            return {}

    async def _fetch_crypto_rates(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç"""
        try:
            crypto_ids = ','.join(self.supported_crypto.keys())
            params = {
                'ids': crypto_ids,
                'vs_currencies': 'usd,eur,rub',
                'include_24hr_change': 'true'
            }
            response = requests.get(self.crypto_api_url, params=params, timeout=10)
            response.raise_for_status()
            return response.json()
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ: {e}")
            return {}

    async def update_rates(self) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        try:
            current_time = datetime.now()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –æ–±–Ω–æ–≤–ª—è—Ç—å –∫—ç—à
            if (self.cache_timestamp and 
                current_time - self.cache_timestamp < self.cache_duration):
                return True
            
            # –ü–æ–ª—É—á–∞–µ–º –∫—É—Ä—Å—ã –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
            fiat_task = asyncio.create_task(self._fetch_fiat_rates())
            crypto_task = asyncio.create_task(self._fetch_crypto_rates())
            
            fiat_rates, crypto_rates = await asyncio.gather(fiat_task, crypto_task)
            
            if fiat_rates:
                self.fiat_cache = fiat_rates
            if crypto_rates:
                self.crypto_cache = crypto_rates
                
            self.cache_timestamp = current_time
            return True
            
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤: {e}")
            return False

    def _normalize_currency_code(self, currency: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–¥–∞ –≤–∞–ª—é—Ç—ã"""
        if currency.upper() in self.supported_fiat:
            return currency.upper()
        
        # –ü–æ–∏—Å–∫ –ø–æ —Å–∏–º–≤–æ–ª—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        for crypto_id, info in self.supported_crypto.items():
            if info['symbol'].upper() == currency.upper():
                return crypto_id
        
        return currency.lower()

    def _is_fiat(self, currency: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∞–ª—é—Ç–∞ —Ñ–∏–∞—Ç–Ω–æ–π"""
        return currency.upper() in self.supported_fiat

    def _is_crypto(self, currency: str) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –≤–∞–ª—é—Ç–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–æ–π"""
        normalized = self._normalize_currency_code(currency)
        return normalized in self.supported_crypto

    async def convert(self, amount: float, from_currency: str, to_currency: str) -> Optional[Dict]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
        """
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –∫—É—Ä—Å—ã –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            await self.update_rates()
            
            from_curr = self._normalize_currency_code(from_currency)
            to_curr = self._normalize_currency_code(to_currency)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø—ã –≤–∞–ª—é—Ç
            from_is_fiat = self._is_fiat(from_curr)
            to_is_fiat = self._is_fiat(to_curr)
            from_is_crypto = self._is_crypto(from_curr)
            to_is_crypto = self._is_crypto(to_curr)
            
            if not (from_is_fiat or from_is_crypto) or not (to_is_fiat or to_is_crypto):
                return None
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∏–∞—Ç -> —Ñ–∏–∞—Ç
            if from_is_fiat and to_is_fiat:
                return await self._convert_fiat_to_fiat(amount, from_curr, to_curr)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ -> –∫—Ä–∏–ø—Ç–æ
            elif from_is_crypto and to_is_crypto:
                return await self._convert_crypto_to_crypto(amount, from_curr, to_curr)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∏–∞—Ç -> –∫—Ä–∏–ø—Ç–æ
            elif from_is_fiat and to_is_crypto:
                return await self._convert_fiat_to_crypto(amount, from_curr, to_curr)
            
            # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ -> —Ñ–∏–∞—Ç
            elif from_is_crypto and to_is_fiat:
                return await self._convert_crypto_to_fiat(amount, from_curr, to_curr)
                
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
            return None

    async def _convert_fiat_to_fiat(self, amount: float, from_curr: str, to_curr: str) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∏–∞—Ç -> —Ñ–∏–∞—Ç"""
        if from_curr == 'USD':
            rate = self.fiat_cache.get(to_curr, 1)
        elif to_curr == 'USD':
            rate = 1 / self.fiat_cache.get(from_curr, 1)
        else:
            usd_from = 1 / self.fiat_cache.get(from_curr, 1)
            usd_to = self.fiat_cache.get(to_curr, 1)
            rate = usd_from * usd_to
        
        result = amount * rate
        
        return {
            'amount': amount,
            'from_currency': from_curr,
            'to_currency': to_curr,
            'result': round(result, 2),
            'rate': round(rate, 6),
            'timestamp': datetime.now().isoformat()
        }

    async def _convert_crypto_to_crypto(self, amount: float, from_curr: str, to_curr: str) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ -> –∫—Ä–∏–ø—Ç–æ —á–µ—Ä–µ–∑ USD"""
        from_price_usd = self.crypto_cache.get(from_curr, {}).get('usd', 0)
        to_price_usd = self.crypto_cache.get(to_curr, {}).get('usd', 0)
        
        if from_price_usd == 0 or to_price_usd == 0:
            return None
        
        usd_amount = amount * from_price_usd
        result = usd_amount / to_price_usd
        rate = from_price_usd / to_price_usd
        
        return {
            'amount': amount,
            'from_currency': self.supported_crypto[from_curr]['symbol'],
            'to_currency': self.supported_crypto[to_curr]['symbol'],
            'result': round(result, 8),
            'rate': round(rate, 8),
            'timestamp': datetime.now().isoformat()
        }

    async def _convert_fiat_to_crypto(self, amount: float, from_curr: str, to_curr: str) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —Ñ–∏–∞—Ç -> –∫—Ä–∏–ø—Ç–æ"""
        # –°–Ω–∞—á–∞–ª–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ USD
        if from_curr != 'USD':
            usd_rate = 1 / self.fiat_cache.get(from_curr, 1)
            usd_amount = amount * usd_rate
        else:
            usd_amount = amount
        
        # –ó–∞—Ç–µ–º USD -> –∫—Ä–∏–ø—Ç–æ
        crypto_price_usd = self.crypto_cache.get(to_curr, {}).get('usd', 0)
        if crypto_price_usd == 0:
            return None
        
        result = usd_amount / crypto_price_usd
        
        return {
            'amount': amount,
            'from_currency': from_curr,
            'to_currency': self.supported_crypto[to_curr]['symbol'],
            'result': round(result, 8),
            'rate': round(1 / crypto_price_usd, 8),
            'timestamp': datetime.now().isoformat()
        }

    async def _convert_crypto_to_fiat(self, amount: float, from_curr: str, to_curr: str) -> Dict:
        """–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ -> —Ñ–∏–∞—Ç"""
        crypto_price_usd = self.crypto_cache.get(from_curr, {}).get('usd', 0)
        if crypto_price_usd == 0:
            return None
        
        usd_amount = amount * crypto_price_usd
        
        # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º USD –≤ —Ü–µ–ª–µ–≤—É—é —Ñ–∏–∞—Ç–Ω—É—é –≤–∞–ª—é—Ç—É
        if to_curr != 'USD':
            fiat_rate = self.fiat_cache.get(to_curr, 1)
            result = usd_amount * fiat_rate
        else:
            result = usd_amount
        
        return {
            'amount': amount,
            'from_currency': self.supported_crypto[from_curr]['symbol'],
            'to_currency': to_curr,
            'result': round(result, 2),
            'rate': round(crypto_price_usd, 2),
            'timestamp': datetime.now().isoformat()
        }

    def get_currency_info(self, currency: str) -> Optional[Dict]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–µ"""
        normalized = self._normalize_currency_code(currency)
        
        if self._is_fiat(normalized):
            info = self.supported_fiat[normalized].copy()
            info['type'] = 'fiat'
            info['code'] = normalized
            return info
        elif self._is_crypto(normalized):
            info = self.supported_crypto[normalized].copy()
            info['type'] = 'crypto'
            info['id'] = normalized
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É
            if normalized in self.crypto_cache:
                crypto_data = self.crypto_cache[normalized]
                info['price_usd'] = crypto_data.get('usd', 0)
                info['price_eur'] = crypto_data.get('eur', 0)
                info['price_rub'] = crypto_data.get('rub', 0)
                info['change_24h'] = crypto_data.get('usd_24h_change', 0)
            
            return info
        
        return None

    def get_supported_currencies(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö –≤–∞–ª—é—Ç"""
        return {
            'fiat': self.supported_fiat,
            'crypto': self.supported_crypto
        }

    async def get_trending_info(self) -> Dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç—Ä–µ–Ω–¥–æ–≤—ã—Ö –≤–∞–ª—é—Ç–∞—Ö"""
        await self.update_rates()
        
        trending = {
            'top_gainers': [],
            'top_losers': [],
            'popular': ['bitcoin', 'ethereum', 'binancecoin']
        }
        
        # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–µ —Ä–∞—Å—Ç—É—â–∏–µ –∏ –ø–∞–¥–∞—é—â–∏–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã
        crypto_changes = []
        for crypto_id, data in self.crypto_cache.items():
            if 'usd_24h_change' in data:
                crypto_changes.append({
                    'id': crypto_id,
                    'symbol': self.supported_crypto[crypto_id]['symbol'],
                    'name': self.supported_crypto[crypto_id]['name'],
                    'change': data['usd_24h_change'],
                    'price': data.get('usd', 0)
                })
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –∏–∑–º–µ–Ω–µ–Ω–∏—é
        crypto_changes.sort(key=lambda x: x['change'], reverse=True)
        
        trending['top_gainers'] = crypto_changes[:5]
        trending['top_losers'] = crypto_changes[-5:]
        
        return trending
