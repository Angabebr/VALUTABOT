from telegram import InlineKeyboardButton, InlineKeyboardMarkup, WebAppInfo
from config import BUTTONS, WEB_APP_URL, CURRENCY_EMOJIS
from typing import List, Dict

class KeyboardBuilder:
    @staticmethod
    def main_menu() -> InlineKeyboardMarkup:
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞"""
        keyboard = [
            [InlineKeyboardButton(BUTTONS['convert'], callback_data='convert')],
            [
                InlineKeyboardButton(BUTTONS['rates'], callback_data='rates'),
                InlineKeyboardButton(BUTTONS['trending'], callback_data='trending')
            ],
            [InlineKeyboardButton(BUTTONS['webapp'], web_app=WebAppInfo(url=WEB_APP_URL))],
            [
                InlineKeyboardButton(BUTTONS['about'], callback_data='about'),
                InlineKeyboardButton(BUTTONS['settings'], callback_data='settings')
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def currency_type_selection() -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä —Ç–∏–ø–∞ –≤–∞–ª—é—Ç (—Ñ–∏–∞—Ç/–∫—Ä–∏–ø—Ç–æ)"""
        keyboard = [
            [
                InlineKeyboardButton(BUTTONS['fiat'], callback_data='type_fiat'),
                InlineKeyboardButton(BUTTONS['crypto'], callback_data='type_crypto')
            ],
            [InlineKeyboardButton(BUTTONS['back'], callback_data='back_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def fiat_currencies(selected_action: str = 'from') -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å —Ñ–∏–∞—Ç–Ω—ã–º–∏ –≤–∞–ª—é—Ç–∞–º–∏"""
        fiat_currencies = [
            ('USD', 'üá∫üá∏ –î–æ–ª–ª–∞—Ä –°–®–ê'),
            ('EUR', 'üá™üá∫ –ï–≤—Ä–æ'),
            ('RUB', 'üá∑üá∫ –†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å'),
            ('GBP', 'üá¨üáß –ë—Ä–∏—Ç–∞–Ω—Å–∫–∏–π —Ñ—É–Ω—Ç'),
            ('JPY', 'üáØüáµ –Ø–ø–æ–Ω—Å–∫–∞—è –π–µ–Ω–∞'),
            ('CNY', 'üá®üá≥ –ö–∏—Ç–∞–π—Å–∫–∏–π —é–∞–Ω—å'),
            ('CAD', 'üá®üá¶ –ö–∞–Ω–∞–¥—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä'),
            ('AUD', 'üá¶üá∫ –ê–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–π –¥–æ–ª–ª–∞—Ä'),
            ('CHF', 'üá®üá≠ –®–≤–µ–π—Ü–∞—Ä—Å–∫–∏–π —Ñ—Ä–∞–Ω–∫'),
            ('KZT', 'üá∞üáø –ö–∞–∑–∞—Ö—Å—Ç–∞–Ω—Å–∫–∏–π —Ç–µ–Ω–≥–µ'),
            ('UAH', 'üá∫üá¶ –£–∫—Ä–∞–∏–Ω—Å–∫–∞—è –≥—Ä–∏–≤–Ω–∞'),
            ('BYN', 'üáßüáæ –ë–µ–ª–æ—Ä—É—Å—Å–∫–∏–π —Ä—É–±–ª—å')
        ]
        
        keyboard = []
        row = []
        
        for i, (code, name) in enumerate(fiat_currencies):
            button = InlineKeyboardButton(
                f"{CURRENCY_EMOJIS.get(code, 'üí∞')} {code}",
                callback_data=f'currency_{selected_action}_{code}'
            )
            row.append(button)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if len(row) == 3 or i == len(fiat_currencies) - 1:
                keyboard.append(row)
                row = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton(BUTTONS['crypto'], callback_data=f'type_crypto_{selected_action}'),
            InlineKeyboardButton(BUTTONS['back'], callback_data='back_convert')
        ])
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def crypto_currencies(selected_action: str = 'from') -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏"""
        crypto_currencies = [
            ('BTC', '‚Çø Bitcoin'),
            ('ETH', 'Œû Ethereum'),
            ('BNB', 'ü™ô Binance Coin'),
            ('ADA', 'üî∫ Cardano'),
            ('SOL', '‚óé Solana'),
            ('XRP', 'üíß XRP'),
            ('DOT', '‚óè Polkadot'),
            ('DOGE', 'üêï Dogecoin'),
            ('MATIC', 'üî∑ Polygon'),
            ('LTC', '≈Å Litecoin'),
            ('LINK', 'üîó Chainlink'),
            ('AVAX', 'üèîÔ∏è Avalanche')
        ]
        
        keyboard = []
        row = []
        
        for i, (symbol, name) in enumerate(crypto_currencies):
            button = InlineKeyboardButton(
                f"{CURRENCY_EMOJIS.get(symbol, '‚Çø')} {symbol}",
                callback_data=f'currency_{selected_action}_{symbol}'
            )
            row.append(button)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
            if len(row) == 3 or i == len(crypto_currencies) - 1:
                keyboard.append(row)
                row = []
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        keyboard.append([
            InlineKeyboardButton(BUTTONS['fiat'], callback_data=f'type_fiat_{selected_action}'),
            InlineKeyboardButton(BUTTONS['back'], callback_data='back_convert')
        ])
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def conversion_actions(from_currency: str, to_currency: str) -> InlineKeyboardMarkup:
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
        keyboard = [
            [
                InlineKeyboardButton("üîÑ –ü–æ–º–µ–Ω—è—Ç—å –º–µ—Å—Ç–∞–º–∏", 
                                   callback_data=f'swap_{from_currency}_{to_currency}'),
                InlineKeyboardButton("üî¢ –î—Ä—É–≥–∞—è —Å—É–º–º–∞", 
                                   callback_data=f'new_amount_{from_currency}_{to_currency}')
            ],
            [
                InlineKeyboardButton("üí± –ù–æ–≤–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è", callback_data='convert'),
                InlineKeyboardButton(BUTTONS['back'], callback_data='back_main')
            ]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def rates_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç"""
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –§–∏–∞—Ç–Ω—ã–µ –≤–∞–ª—é—Ç—ã", callback_data='rates_fiat'),
                InlineKeyboardButton("‚Çø –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã", callback_data='rates_crypto')
            ],
            [
                InlineKeyboardButton(BUTTONS['refresh'], callback_data='rates_refresh'),
                InlineKeyboardButton(BUTTONS['trending'], callback_data='trending')
            ],
            [InlineKeyboardButton(BUTTONS['back'], callback_data='back_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def trending_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –ø–æ–ø—É–ª—è—Ä–Ω—ã—Ö –≤–∞–ª—é—Ç"""
        keyboard = [
            [
                InlineKeyboardButton("üìà –†–∞—Å—Ç—É—â–∏–µ", callback_data='trending_gainers'),
                InlineKeyboardButton("üìâ –ü–∞–¥–∞—é—â–∏–µ", callback_data='trending_losers')
            ],
            [
                InlineKeyboardButton("üî• –ü–æ–ø—É–ª—è—Ä–Ω—ã–µ", callback_data='trending_popular'),
                InlineKeyboardButton(BUTTONS['refresh'], callback_data='trending_refresh')
            ],
            [InlineKeyboardButton(BUTTONS['back'], callback_data='back_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def settings_menu() -> InlineKeyboardMarkup:
        """–ú–µ–Ω—é –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        keyboard = [
            [
                InlineKeyboardButton("üí∞ –í–∞–ª—é—Ç–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é", callback_data='settings_default_currency'),
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data='settings_notifications')
            ],
            [
                InlineKeyboardButton("üåê –Ø–∑—ã–∫", callback_data='settings_language'),
                InlineKeyboardButton("üé® –¢–µ–º–∞", callback_data='settings_theme')
            ],
            [InlineKeyboardButton(BUTTONS['back'], callback_data='back_main')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def back_button(callback_data: str = 'back_main') -> InlineKeyboardMarkup:
        """–ü—Ä–æ—Å—Ç–∞—è –∫–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥"""
        keyboard = [[InlineKeyboardButton(BUTTONS['back'], callback_data=callback_data)]]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def currency_selection_with_search(currency_type: str, selected_action: str = 'from') -> InlineKeyboardMarkup:
        """–í—ã–±–æ—Ä –≤–∞–ª—é—Ç—ã —Å –ø–æ–∏—Å–∫–æ–º"""
        keyboard = [
            [InlineKeyboardButton("üîç –ü–æ–∏—Å–∫ –≤–∞–ª—é—Ç—ã", callback_data=f'search_{currency_type}_{selected_action}')]
        ]
        
        if currency_type == 'fiat':
            keyboard.extend(KeyboardBuilder.fiat_currencies(selected_action).inline_keyboard[:-1])
        else:
            keyboard.extend(KeyboardBuilder.crypto_currencies(selected_action).inline_keyboard[:-1])
        
        # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        other_type = 'crypto' if currency_type == 'fiat' else 'fiat'
        keyboard.append([
            InlineKeyboardButton(BUTTONS[other_type], callback_data=f'type_{other_type}_{selected_action}'),
            InlineKeyboardButton(BUTTONS['back'], callback_data='back_convert')
        ])
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def amount_quick_select(from_currency: str, to_currency: str) -> InlineKeyboardMarkup:
        """–ë—ã—Å—Ç—Ä—ã–π –≤—ã–±–æ—Ä —Å—É–º–º—ã"""
        amounts = [1, 10, 100, 1000, 5000, 10000]
        
        keyboard = []
        row = []
        
        for amount in amounts:
            button = InlineKeyboardButton(
                f"{amount}",
                callback_data=f'quick_amount_{amount}_{from_currency}_{to_currency}'
            )
            row.append(button)
            
            if len(row) == 3:
                keyboard.append(row)
                row = []
        
        if row:  # –î–æ–±–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∫–Ω–æ–ø–∫–∏
            keyboard.append(row)
        
        keyboard.append([
            InlineKeyboardButton("‚úèÔ∏è –í–≤–µ—Å—Ç–∏ –≤—Ä—É—á–Ω—É—é", callback_data=f'manual_amount_{from_currency}_{to_currency}'),
            InlineKeyboardButton(BUTTONS['back'], callback_data='back_currency_selection')
        ])
        
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_currency_info_keyboard(currency: str, currency_type: str) -> InlineKeyboardMarkup:
        """–ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞–ª—é—Ç–µ"""
        keyboard = [
            [
                InlineKeyboardButton("üí± –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å", callback_data=f'convert_from_{currency}'),
                InlineKeyboardButton("üìä –ì—Ä–∞—Ñ–∏–∫", callback_data=f'chart_{currency}')
            ],
            [
                InlineKeyboardButton("‚≠ê –í –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f'favorite_{currency}'),
                InlineKeyboardButton("üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è", callback_data=f'alert_{currency}')
            ],
            [InlineKeyboardButton(BUTTONS['back'], callback_data=f'rates_{currency_type}')]
        ]
        return InlineKeyboardMarkup(keyboard)

    @staticmethod
    def create_pagination_keyboard(current_page: int, total_pages: int, callback_prefix: str) -> List[InlineKeyboardButton]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"""
        buttons = []
        
        if current_page > 1:
            buttons.append(InlineKeyboardButton("‚¨ÖÔ∏è", callback_data=f'{callback_prefix}_page_{current_page - 1}'))
        
        buttons.append(InlineKeyboardButton(f"{current_page}/{total_pages}", callback_data='noop'))
        
        if current_page < total_pages:
            buttons.append(InlineKeyboardButton("‚û°Ô∏è", callback_data=f'{callback_prefix}_page_{current_page + 1}'))
        
        return buttons
